name: Docker Build and Push All Images to tencentyun

on:
  workflow_dispatch:
    inputs:
      runner_label_json:
        description: 'JSON 格式的 runner 标签数组（如 ["ubuntu-latest"] 或 ["self-hosted"]）'
        required: true
        default: '["ubuntu-latest"]'

jobs:
  build-and-push-main-amd64:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build main image (amd64) and load locally
        uses: docker/setup-qemu-action@v3
          docker build --platform linux/amd64 -t ccr.ccs.tencentyun.com/nexent-hub/nexent:amd64 -f make/main/Dockerfile .
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Push main image (amd64) to Tencent Cloud
        run: docker push ccr.ccs.tencentyun.com/nexent-hub/nexent:amd64

  build-and-push-main-arm64:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build main image (arm64) and load locally
        uses: docker/setup-qemu-action@v3
          docker build --platform linux/arm64 -t ccr.ccs.tencentyun.com/nexent-hub/nexent:arm64 -f make/main/Dockerfile .
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Push main image (arm64) to Tencent Cloud
        run: docker push ccr.ccs.tencentyun.com/nexent-hub/nexent:arm64

  build-and-push-data-process-amd64:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    steps:
      - name: Free up disk space on GitHub runner
        uses: docker/setup-qemu-action@v3
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Clone model
        uses: docker/setup-qemu-action@v3
          GIT_LFS_SKIP_SMUDGE=1 git clone https://huggingface.co/Nexent-AI/model-assets
          cd ./model-assets
          GIT_TRACE=1 GIT_CURL_VERBOSE=1 GIT_LFS_LOG=debug git lfs pull
          rm -rf .git .gitattributes
      - name: Build data process image (amd64) and load locally
        uses: docker/setup-qemu-action@v3
          docker build --platform linux/amd64 -t ccr.ccs.tencentyun.com/nexent-hub/nexent-data-process:amd64 -f make/data_process/Dockerfile .
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Push data process image (amd64) to Tencent Cloud
        run: docker push ccr.ccs.tencentyun.com/nexent-hub/nexent-data-process:amd64

  build-and-push-data-process-arm64:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    steps:
      - name: Free up disk space on GitHub runner
        uses: docker/setup-qemu-action@v3
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Clone model
        uses: docker/setup-qemu-action@v3
          GIT_LFS_SKIP_SMUDGE=1 git clone https://huggingface.co/Nexent-AI/model-assets
          cd ./model-assets
          GIT_TRACE=1 GIT_CURL_VERBOSE=1 GIT_LFS_LOG=debug git lfs pull
          rm -rf .git .gitattributes
      - name: Build data process image (arm64) and load locally
        uses: docker/setup-qemu-action@v3
          docker build --platform linux/arm64 -t ccr.ccs.tencentyun.com/nexent-hub/nexent-data-process:arm64 -f make/data_process/Dockerfile .
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Push data process image (arm64) to Tencent Cloud
        run: docker push ccr.ccs.tencentyun.com/nexent-hub/nexent-data-process:arm64

  build-and-push-web-amd64:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build web image (amd64) and load locally
        uses: docker/setup-qemu-action@v3
          docker build --platform linux/amd64 -t ccr.ccs.tencentyun.com/nexent-hub/nexent-web:amd64 -f make/web/Dockerfile .
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Push web image (amd64) to Tencent Cloud
        run: docker push ccr.ccs.tencentyun.com/nexent-hub/nexent-web:amd64

  build-and-push-web-arm64:
    runs-on: ${{ fromJson(inputs.runner_label_json) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build web image (arm64) and load locally
        uses: docker/setup-qemu-action@v3
          docker build --platform linux/arm64 -t ccr.ccs.tencentyun.com/nexent-hub/nexent-web:arm64 -f make/web/Dockerfile .
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Push web image (arm64) to Tencent Cloud
        run: docker push ccr.ccs.tencentyun.com/nexent-hub/nexent-web:arm64

  manifest-push-main:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-main-amd64
      - build-and-push-main-arm64
    steps:
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Create and push manifest for main (Tencent Cloud)
        uses: docker/setup-qemu-action@v3
          docker manifest create ccr.ccs.tencentyun.com/nexent-hub/nexent:latest \
            ccr.ccs.tencentyun.com/nexent-hub/nexent:amd64 \
            ccr.ccs.tencentyun.com/nexent-hub/nexent:arm64
          docker manifest push ccr.ccs.tencentyun.com/nexent-hub/nexent:latest

  manifest-push-data-process:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-data-process-amd64
      - build-and-push-data-process-arm64
    steps:
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Create and push manifest for data-process (Tencent Cloud)
        uses: docker/setup-qemu-action@v3
          docker manifest create ccr.ccs.tencentyun.com/nexent-hub/nexent-data-process:latest \
            ccr.ccs.tencentyun.com/nexent-hub/nexent-data-process:amd64 \
            ccr.ccs.tencentyun.com/nexent-hub/nexent-data-process:arm64
          docker manifest push ccr.ccs.tencentyun.com/nexent-hub/nexent-data-process:latest

  manifest-push-web:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-web-amd64
      - build-and-push-web-arm64
    steps:
      - name: Login to Tencent Cloud
        run: echo ${{ secrets.TCR_PASSWORD }} | docker login ccr.ccs.tencentyun.com --username=${{ secrets.TCR_USERNAME }} --password-stdin
      - name: Create and push manifest for web (Tencent Cloud)
        uses: docker/setup-qemu-action@v3
          docker manifest create ccr.ccs.tencentyun.com/nexent-hub/nexent-web:latest \
            ccr.ccs.tencentyun.com/nexent-hub/nexent-web:amd64 \
            ccr.ccs.tencentyun.com/nexent-hub/nexent-web:arm64
          docker manifest push ccr.ccs.tencentyun.com/nexent-hub/nexent-web:latest
